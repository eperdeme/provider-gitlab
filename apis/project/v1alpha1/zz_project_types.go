// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContainerExpirationPolicyInitParameters struct {

	// (String) The cadence of the policy. Valid values are: 1d, 7d, 14d, 1month, 3month.
	// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
	Cadence *string `json:"cadence,omitempty" tf:"cadence,omitempty"`

	// (Boolean) If true, the policy is enabled.
	// If true, the policy is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The number of images to keep.
	// The number of images to keep.
	KeepN *float64 `json:"keepN,omitempty" tf:"keep_n,omitempty"`

	// (String, Deprecated) The regular expression to match image names to delete.
	// The regular expression to match image names to delete.
	NameRegex *string `json:"nameRegex,omitempty" tf:"name_regex,omitempty"`

	// (String) The regular expression to match image names to delete.
	// The regular expression to match image names to delete.
	NameRegexDelete *string `json:"nameRegexDelete,omitempty" tf:"name_regex_delete,omitempty"`

	// (String) The regular expression to match image names to keep.
	// The regular expression to match image names to keep.
	NameRegexKeep *string `json:"nameRegexKeep,omitempty" tf:"name_regex_keep,omitempty"`

	// (String) The number of days to keep images.
	// The number of days to keep images.
	OlderThan *string `json:"olderThan,omitempty" tf:"older_than,omitempty"`
}

type ContainerExpirationPolicyObservation struct {

	// (String) The cadence of the policy. Valid values are: 1d, 7d, 14d, 1month, 3month.
	// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
	Cadence *string `json:"cadence,omitempty" tf:"cadence,omitempty"`

	// (Boolean) If true, the policy is enabled.
	// If true, the policy is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The number of images to keep.
	// The number of images to keep.
	KeepN *float64 `json:"keepN,omitempty" tf:"keep_n,omitempty"`

	// (String, Deprecated) The regular expression to match image names to delete.
	// The regular expression to match image names to delete.
	NameRegex *string `json:"nameRegex,omitempty" tf:"name_regex,omitempty"`

	// (String) The regular expression to match image names to delete.
	// The regular expression to match image names to delete.
	NameRegexDelete *string `json:"nameRegexDelete,omitempty" tf:"name_regex_delete,omitempty"`

	// (String) The regular expression to match image names to keep.
	// The regular expression to match image names to keep.
	NameRegexKeep *string `json:"nameRegexKeep,omitempty" tf:"name_regex_keep,omitempty"`

	// (String) The next time the policy will run.
	// The next time the policy will run.
	NextRunAt *string `json:"nextRunAt,omitempty" tf:"next_run_at,omitempty"`

	// (String) The number of days to keep images.
	// The number of days to keep images.
	OlderThan *string `json:"olderThan,omitempty" tf:"older_than,omitempty"`
}

type ContainerExpirationPolicyParameters struct {

	// (String) The cadence of the policy. Valid values are: 1d, 7d, 14d, 1month, 3month.
	// The cadence of the policy. Valid values are: `1d`, `7d`, `14d`, `1month`, `3month`.
	// +kubebuilder:validation:Optional
	Cadence *string `json:"cadence,omitempty" tf:"cadence,omitempty"`

	// (Boolean) If true, the policy is enabled.
	// If true, the policy is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The number of images to keep.
	// The number of images to keep.
	// +kubebuilder:validation:Optional
	KeepN *float64 `json:"keepN,omitempty" tf:"keep_n,omitempty"`

	// (String, Deprecated) The regular expression to match image names to delete.
	// The regular expression to match image names to delete.
	// +kubebuilder:validation:Optional
	NameRegex *string `json:"nameRegex,omitempty" tf:"name_regex,omitempty"`

	// (String) The regular expression to match image names to delete.
	// The regular expression to match image names to delete.
	// +kubebuilder:validation:Optional
	NameRegexDelete *string `json:"nameRegexDelete,omitempty" tf:"name_regex_delete,omitempty"`

	// (String) The regular expression to match image names to keep.
	// The regular expression to match image names to keep.
	// +kubebuilder:validation:Optional
	NameRegexKeep *string `json:"nameRegexKeep,omitempty" tf:"name_regex_keep,omitempty"`

	// (String) The number of days to keep images.
	// The number of days to keep images.
	// +kubebuilder:validation:Optional
	OlderThan *string `json:"olderThan,omitempty" tf:"older_than,omitempty"`
}

type ProjectInitParameters struct {

	// (Boolean) Set to true if you want to treat skipped pipelines as if they finished with success.
	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline *bool `json:"allowMergeOnSkippedPipeline,omitempty" tf:"allow_merge_on_skipped_pipeline,omitempty"`

	// (String) Set the analytics access level. Valid values are disabled, private, enabled.
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel *string `json:"analyticsAccessLevel,omitempty" tf:"analytics_access_level,omitempty"`

	// (Number) Number of merge request approvals required for merging. Default is 0.
	// This field does not work well in combination with the gitlab_project_approval_rule resource
	// and is most likely gonna be deprecated in a future GitLab version (see this upstream epic).
	// In the meantime we recommend against using this attribute and use gitlab_project_approval_rule instead.
	// Number of merge request approvals required for merging. Default is 0.
	// This field **does not** work well in combination with the `gitlab_project_approval_rule` resource
	// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
	// In the meantime we recommend against using this attribute and use `gitlab_project_approval_rule` instead.
	ApprovalsBeforeMerge *float64 `json:"approvalsBeforeMerge,omitempty" tf:"approvals_before_merge,omitempty"`

	// (Boolean) Set to true to archive the project instead of deleting on destroy. If set to true it will entire omit the DELETE operation.
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
	ArchiveOnDestroy *bool `json:"archiveOnDestroy,omitempty" tf:"archive_on_destroy,omitempty"`

	// only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived *bool `json:"archived,omitempty" tf:"archived,omitempty"`

	// cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
	// Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines *string `json:"autoCancelPendingPipelines,omitempty" tf:"auto_cancel_pending_pipelines,omitempty"`

	// (String) Auto Deploy strategy. Valid values are continuous, manual, timed_incremental.
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
	AutoDevopsDeployStrategy *string `json:"autoDevopsDeployStrategy,omitempty" tf:"auto_devops_deploy_strategy,omitempty"`

	// (Boolean) Enable Auto DevOps for this project.
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled *bool `json:"autoDevopsEnabled,omitempty" tf:"auto_devops_enabled,omitempty"`

	// closing referenced issues on default branch.
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues *bool `json:"autocloseReferencedIssues,omitempty" tf:"autoclose_referenced_issues,omitempty"`

	// (String) A local path to the avatar image to upload. Note: not available for imported resources.
	// A local path to the avatar image to upload. **Note**: not available for imported resources.
	Avatar *string `json:"avatar,omitempty" tf:"avatar,omitempty"`

	// (String) The hash of the avatar image. Use filesha256("path/to/avatar.png") whenever possible. Note: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	AvatarHash *string `json:"avatarHash,omitempty" tf:"avatar_hash,omitempty"`

	// (String, Deprecated) Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
	// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
	BuildCoverageRegex *string `json:"buildCoverageRegex,omitempty" tf:"build_coverage_regex,omitempty"`

	// (String) The Git strategy. Defaults to fetch. Valid values are clone, fetch.
	// The Git strategy. Defaults to fetch. Valid values are `clone`, `fetch`.
	BuildGitStrategy *string `json:"buildGitStrategy,omitempty" tf:"build_git_strategy,omitempty"`

	// (Number) The maximum amount of time, in seconds, that a job can run.
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout *float64 `json:"buildTimeout,omitempty" tf:"build_timeout,omitempty"`

	// (String) Set the builds access level. Valid values are disabled, private, enabled.
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel *string `json:"buildsAccessLevel,omitempty" tf:"builds_access_level,omitempty"`

	// (String) Custom Path to CI config file.
	// Custom Path to CI config file.
	CiConfigPath *string `json:"ciConfigPath,omitempty" tf:"ci_config_path,omitempty"`

	// (Number) Default number of revisions for shallow cloning.
	// Default number of revisions for shallow cloning.
	CiDefaultGitDepth *float64 `json:"ciDefaultGitDepth,omitempty" tf:"ci_default_git_depth,omitempty"`

	// (Boolean) When a new deployment job starts, skip older deployment jobs that are still pending.
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled *bool `json:"ciForwardDeploymentEnabled,omitempty" tf:"ci_forward_deployment_enabled,omitempty"`

	// (String) The role required to cancel a pipeline or job. Introduced in GitLab 16.8. Premium and Ultimate only. Valid values are developer, maintainer, no one
	// The role required to cancel a pipeline or job. Introduced in GitLab 16.8. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
	CiRestrictPipelineCancellationRole *string `json:"ciRestrictPipelineCancellationRole,omitempty" tf:"ci_restrict_pipeline_cancellation_role,omitempty"`

	// (Boolean) Use separate caches for protected branches.
	// Use separate caches for protected branches.
	CiSeparatedCaches *bool `json:"ciSeparatedCaches,omitempty" tf:"ci_separated_caches,omitempty"`

	// (Block List, Max: 1) Set the image cleanup policy for this project. Note: this field is sometimes named container_expiration_policy_attributes in the GitLab Upstream API. (see below for nested schema)
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
	ContainerExpirationPolicy []ContainerExpirationPolicyInitParameters `json:"containerExpirationPolicy,omitempty" tf:"container_expiration_policy,omitempty"`

	// (String) Set visibility of container registry, for this project. Valid values are disabled, private, enabled.
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel *string `json:"containerRegistryAccessLevel,omitempty" tf:"container_registry_access_level,omitempty"`

	// (Boolean, Deprecated) Enable container registry for the project.
	// Enable container registry for the project.
	ContainerRegistryEnabled *bool `json:"containerRegistryEnabled,omitempty" tf:"container_registry_enabled,omitempty"`

	// (String) The default branch for the project.
	// The default branch for the project.
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	// (String) A description of the project.
	// A description of the project.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Enable email notifications.
	// Enable email notifications.
	EmailsEnabled *bool `json:"emailsEnabled,omitempty" tf:"emails_enabled,omitempty"`

	// (String) Set the environments access level. Valid values are disabled, private, enabled.
	// Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
	EnvironmentsAccessLevel *string `json:"environmentsAccessLevel,omitempty" tf:"environments_access_level,omitempty"`

	// (String) The classification label for the project.
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel *string `json:"externalAuthorizationClassificationLabel,omitempty" tf:"external_authorization_classification_label,omitempty"`

	// (String) Set the feature flags access level. Valid values are disabled, private, enabled.
	// Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
	FeatureFlagsAccessLevel *string `json:"featureFlagsAccessLevel,omitempty" tf:"feature_flags_access_level,omitempty"`

	// (Number) The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
	// The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
	ForkedFromProjectID *float64 `json:"forkedFromProjectId,omitempty" tf:"forked_from_project_id,omitempty"`

	// (String) Set the forking access level. Valid values are disabled, private, enabled.
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel *string `json:"forkingAccessLevel,omitempty" tf:"forking_access_level,omitempty"`

	// (Boolean) Enable group runners for this project.
	// Enable group runners for this project.
	GroupRunnersEnabled *bool `json:"groupRunnersEnabled,omitempty" tf:"group_runners_enabled,omitempty"`

	// level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
	GroupWithProjectTemplatesID *float64 `json:"groupWithProjectTemplatesId,omitempty" tf:"group_with_project_templates_id,omitempty"`

	// (String) Git URL to a repository to be imported. Together with mirror = true it will setup a Pull Mirror. This can also be used together with forked_from_project_id to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in import_url_username and import_url_password. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. See the examples section for how to properly use it.
	// Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `forked_from_project_id` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `import_url_username` and `import_url_password`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. See the examples section for how to properly use it.
	ImportURL *string `json:"importUrl,omitempty" tf:"import_url,omitempty"`

	// (String) The username for the import_url. The value of this field is used to construct a valid import_url and is only related to the provider.  See the examples section for how to properly use it.
	// The username for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider.  See the examples section for how to properly use it.
	ImportURLUsername *string `json:"importUrlUsername,omitempty" tf:"import_url_username,omitempty"`

	// (String) Set the infrastructure access level. Valid values are disabled, private, enabled.
	// Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
	InfrastructureAccessLevel *string `json:"infrastructureAccessLevel,omitempty" tf:"infrastructure_access_level,omitempty"`

	// (Boolean) Create main branch with first commit containing a README.md file. Must be set to true if importing an uninitialized project with a different default_branch.
	// Create main branch with first commit containing a README.md file. Must be set to `true` if importing an uninitialized project with a different `default_branch`.
	InitializeWithReadme *bool `json:"initializeWithReadme,omitempty" tf:"initialize_with_readme,omitempty"`

	// (String) Set the issues access level. Valid values are disabled, private, enabled.
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel *string `json:"issuesAccessLevel,omitempty" tf:"issues_access_level,omitempty"`

	// (Boolean) Enable issue tracking for the project.
	// Enable issue tracking for the project.
	IssuesEnabled *bool `json:"issuesEnabled,omitempty" tf:"issues_enabled,omitempty"`

	// (String) Sets the template for new issues in the project.
	// Sets the template for new issues in the project.
	IssuesTemplate *string `json:"issuesTemplate,omitempty" tf:"issues_template,omitempty"`

	// (Boolean) Disable or enable the ability to keep the latest artifact for this project.
	// Disable or enable the ability to keep the latest artifact for this project.
	KeepLatestArtifact *bool `json:"keepLatestArtifact,omitempty" tf:"keep_latest_artifact,omitempty"`

	// (Boolean) Enable LFS for the project.
	// Enable LFS for the project.
	LfsEnabled *bool `json:"lfsEnabled,omitempty" tf:"lfs_enabled,omitempty"`

	// (String) Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate *string `json:"mergeCommitTemplate,omitempty" tf:"merge_commit_template,omitempty"`

	// (String) Set the merge method. Valid values are merge, rebase_merge, ff.
	// Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
	MergeMethod *string `json:"mergeMethod,omitempty" tf:"merge_method,omitempty"`

	// (Boolean) Enable or disable merge pipelines.
	// Enable or disable merge pipelines.
	MergePipelinesEnabled *bool `json:"mergePipelinesEnabled,omitempty" tf:"merge_pipelines_enabled,omitempty"`

	// (String) Set the merge requests access level. Valid values are disabled, private, enabled.
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel *string `json:"mergeRequestsAccessLevel,omitempty" tf:"merge_requests_access_level,omitempty"`

	// (Boolean) Enable merge requests for the project.
	// Enable merge requests for the project.
	MergeRequestsEnabled *bool `json:"mergeRequestsEnabled,omitempty" tf:"merge_requests_enabled,omitempty"`

	// (String) Sets the template for new merge requests in the project.
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate *string `json:"mergeRequestsTemplate,omitempty" tf:"merge_requests_template,omitempty"`

	// (Boolean) Enable or disable merge trains. Requires merge_pipelines_enabled to be set to true to take effect.
	// Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
	MergeTrainsEnabled *bool `json:"mergeTrainsEnabled,omitempty" tf:"merge_trains_enabled,omitempty"`

	// (Boolean) Enable project pull mirror.
	// Enable project pull mirror.
	Mirror *bool `json:"mirror,omitempty" tf:"mirror,omitempty"`

	// (Boolean) Enable overwrite diverged branches for a mirrored project.
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches *bool `json:"mirrorOverwritesDivergedBranches,omitempty" tf:"mirror_overwrites_diverged_branches,omitempty"`

	// (Boolean) Enable trigger builds on pushes for a mirrored project.
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds *bool `json:"mirrorTriggerBuilds,omitempty" tf:"mirror_trigger_builds,omitempty"`

	// (String) Set the monitor access level. Valid values are disabled, private, enabled.
	// Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
	MonitorAccessLevel *string `json:"monitorAccessLevel,omitempty" tf:"monitor_access_level,omitempty"`

	// (Boolean) For forked projects, target merge requests to this project. If false, the target will be the upstream project.
	// For forked projects, target merge requests to this project. If false, the target will be the upstream project.
	MrDefaultTargetSelf *bool `json:"mrDefaultTargetSelf,omitempty" tf:"mr_default_target_self,omitempty"`

	// (Number) The namespace (group or user) of the project. Defaults to your user.
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceID *float64 `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (Boolean) Set to true if you want allow merges only if all discussions are resolved.
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved *bool `json:"onlyAllowMergeIfAllDiscussionsAreResolved,omitempty" tf:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`

	// (Boolean) Set to true if you want allow merges only if a pipeline succeeds.
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds *bool `json:"onlyAllowMergeIfPipelineSucceeds,omitempty" tf:"only_allow_merge_if_pipeline_succeeds,omitempty"`

	// (Boolean) Enable only mirror protected branches for a mirrored project.
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches *bool `json:"onlyMirrorProtectedBranches,omitempty" tf:"only_mirror_protected_branches,omitempty"`

	// (Boolean) Enable packages repository for the project.
	// Enable packages repository for the project.
	PackagesEnabled *bool `json:"packagesEnabled,omitempty" tf:"packages_enabled,omitempty"`

	// (String) Enable pages access control. Valid values are public, private, enabled, disabled.
	// Enable pages access control. Valid values are `public`, `private`, `enabled`, `disabled`.
	PagesAccessLevel *string `json:"pagesAccessLevel,omitempty" tf:"pages_access_level,omitempty"`

	// (String) The path of the repository.
	// The path of the repository.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Boolean, Deprecated) Enable pipelines for the project. The pipelines_enabled field is being sent as jobs_enabled in the GitLab API calls.
	// Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
	PipelinesEnabled *bool `json:"pipelinesEnabled,omitempty" tf:"pipelines_enabled,omitempty"`

	// (Boolean) Show link to create/view merge request when pushing from the command line
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled *bool `json:"printingMergeRequestLinkEnabled,omitempty" tf:"printing_merge_request_link_enabled,omitempty"`

	// project members.
	// If true, jobs can be viewed by non-project members.
	PublicBuilds *bool `json:"publicBuilds,omitempty" tf:"public_builds,omitempty"`

	// project members.
	// If true, jobs can be viewed by non-project members.
	PublicJobs *bool `json:"publicJobs,omitempty" tf:"public_jobs,omitempty"`

	// (Block List, Max: 1) Push rules for the project. (see below for nested schema)
	// Push rules for the project.
	PushRules []PushRulesInitParameters `json:"pushRules,omitempty" tf:"push_rules,omitempty"`

	// (String) Set the releases access level. Valid values are disabled, private, enabled.
	// Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
	ReleasesAccessLevel *string `json:"releasesAccessLevel,omitempty" tf:"releases_access_level,omitempty"`

	// (Boolean) Enable Delete source branch option by default for all new merge requests.
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge *bool `json:"removeSourceBranchAfterMerge,omitempty" tf:"remove_source_branch_after_merge,omitempty"`

	// (String) Set the repository access level. Valid values are disabled, private, enabled.
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel *string `json:"repositoryAccessLevel,omitempty" tf:"repository_access_level,omitempty"`

	// (String) Which storage shard the repository is on. (administrator only)
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage *string `json:"repositoryStorage,omitempty" tf:"repository_storage,omitempty"`

	// (Boolean) Allow users to request member access.
	// Allow users to request member access.
	RequestAccessEnabled *bool `json:"requestAccessEnabled,omitempty" tf:"request_access_enabled,omitempty"`

	// (String) Set the requirements access level. Valid values are disabled, private, enabled.
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel *string `json:"requirementsAccessLevel,omitempty" tf:"requirements_access_level,omitempty"`

	// (Boolean) Automatically resolve merge request diffs discussions on lines changed with a push.
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions *bool `json:"resolveOutdatedDiffDiscussions,omitempty" tf:"resolve_outdated_diff_discussions,omitempty"`

	// defined variables when triggering a pipeline.
	// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
	RestrictUserDefinedVariables *bool `json:"restrictUserDefinedVariables,omitempty" tf:"restrict_user_defined_variables,omitempty"`

	// (String) Set the security and compliance access level. Valid values are disabled, private, enabled.
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel *string `json:"securityAndComplianceAccessLevel,omitempty" tf:"security_and_compliance_access_level,omitempty"`

	// (Boolean) Enable shared runners for this project.
	// Enable shared runners for this project.
	SharedRunnersEnabled *bool `json:"sharedRunnersEnabled,omitempty" tf:"shared_runners_enabled,omitempty"`

	// level.
	// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
	// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
	// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
	// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
	// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
	// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
	SkipWaitForDefaultBranchProtection *bool `json:"skipWaitForDefaultBranchProtection,omitempty" tf:"skip_wait_for_default_branch_protection,omitempty"`

	// (String) Set the snippets access level. Valid values are disabled, private, enabled.
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel *string `json:"snippetsAccessLevel,omitempty" tf:"snippets_access_level,omitempty"`

	// (Boolean) Enable snippets for the project.
	// Enable snippets for the project.
	SnippetsEnabled *bool `json:"snippetsEnabled,omitempty" tf:"snippets_enabled,omitempty"`

	// (String) Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate *string `json:"squashCommitTemplate,omitempty" tf:"squash_commit_template,omitempty"`

	// (String) Squash commits when merge request. Valid values are never, always, default_on, or default_off. The default value is default_off. [GitLab >= 14.1]
	// Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`. [GitLab >= 14.1]
	SquashOption *string `json:"squashOption,omitempty" tf:"squash_option,omitempty"`

	// (String) The commit message used to apply merge request suggestions.
	// The commit message used to apply merge request suggestions.
	SuggestionCommitMessage *string `json:"suggestionCommitMessage,omitempty" tf:"suggestion_commit_message,omitempty"`

	// (Set of String) The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with template_project_id.
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// (Number) When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with template_name. See gitlab_group_project_file_template to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab_group_project_file_template` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
	TemplateProjectID *float64 `json:"templateProjectId,omitempty" tf:"template_project_id,omitempty"`

	// (Set of String) The list of topics for the project.
	// The list of topics for the project.
	Topics []*string `json:"topics,omitempty" tf:"topics,omitempty"`

	// (Boolean) Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	// ~> When using a custom template, Group Tokens won't work. You must use a real user's Personal Access Token.
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	// ~> When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting.html#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
	UseCustomTemplate *bool `json:"useCustomTemplate,omitempty" tf:"use_custom_template,omitempty"`

	// (String) Set to public to create a public project. Valid values are private, internal, public.
	// Set to `public` to create a public project. Valid values are `private`, `internal`, `public`.
	VisibilityLevel *string `json:"visibilityLevel,omitempty" tf:"visibility_level,omitempty"`

	// (String) Set the wiki access level. Valid values are disabled, private, enabled.
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel *string `json:"wikiAccessLevel,omitempty" tf:"wiki_access_level,omitempty"`

	// (Boolean) Enable wiki for the project.
	// Enable wiki for the project.
	WikiEnabled *bool `json:"wikiEnabled,omitempty" tf:"wiki_enabled,omitempty"`
}

type ProjectObservation struct {

	// (Boolean) Set to true if you want to treat skipped pipelines as if they finished with success.
	// Set to true if you want to treat skipped pipelines as if they finished with success.
	AllowMergeOnSkippedPipeline *bool `json:"allowMergeOnSkippedPipeline,omitempty" tf:"allow_merge_on_skipped_pipeline,omitempty"`

	// (String) Set the analytics access level. Valid values are disabled, private, enabled.
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	AnalyticsAccessLevel *string `json:"analyticsAccessLevel,omitempty" tf:"analytics_access_level,omitempty"`

	// (Number) Number of merge request approvals required for merging. Default is 0.
	// This field does not work well in combination with the gitlab_project_approval_rule resource
	// and is most likely gonna be deprecated in a future GitLab version (see this upstream epic).
	// In the meantime we recommend against using this attribute and use gitlab_project_approval_rule instead.
	// Number of merge request approvals required for merging. Default is 0.
	// This field **does not** work well in combination with the `gitlab_project_approval_rule` resource
	// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
	// In the meantime we recommend against using this attribute and use `gitlab_project_approval_rule` instead.
	ApprovalsBeforeMerge *float64 `json:"approvalsBeforeMerge,omitempty" tf:"approvals_before_merge,omitempty"`

	// (Boolean) Set to true to archive the project instead of deleting on destroy. If set to true it will entire omit the DELETE operation.
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
	ArchiveOnDestroy *bool `json:"archiveOnDestroy,omitempty" tf:"archive_on_destroy,omitempty"`

	// only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	Archived *bool `json:"archived,omitempty" tf:"archived,omitempty"`

	// cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
	// Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
	AutoCancelPendingPipelines *string `json:"autoCancelPendingPipelines,omitempty" tf:"auto_cancel_pending_pipelines,omitempty"`

	// (String) Auto Deploy strategy. Valid values are continuous, manual, timed_incremental.
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
	AutoDevopsDeployStrategy *string `json:"autoDevopsDeployStrategy,omitempty" tf:"auto_devops_deploy_strategy,omitempty"`

	// (Boolean) Enable Auto DevOps for this project.
	// Enable Auto DevOps for this project.
	AutoDevopsEnabled *bool `json:"autoDevopsEnabled,omitempty" tf:"auto_devops_enabled,omitempty"`

	// closing referenced issues on default branch.
	// Set whether auto-closing referenced issues on default branch.
	AutocloseReferencedIssues *bool `json:"autocloseReferencedIssues,omitempty" tf:"autoclose_referenced_issues,omitempty"`

	// (String) A local path to the avatar image to upload. Note: not available for imported resources.
	// A local path to the avatar image to upload. **Note**: not available for imported resources.
	Avatar *string `json:"avatar,omitempty" tf:"avatar,omitempty"`

	// (String) The hash of the avatar image. Use filesha256("path/to/avatar.png") whenever possible. Note: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	AvatarHash *string `json:"avatarHash,omitempty" tf:"avatar_hash,omitempty"`

	// (String) The URL of the avatar image.
	// The URL of the avatar image.
	AvatarURL *string `json:"avatarUrl,omitempty" tf:"avatar_url,omitempty"`

	// (String, Deprecated) Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
	// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
	BuildCoverageRegex *string `json:"buildCoverageRegex,omitempty" tf:"build_coverage_regex,omitempty"`

	// (String) The Git strategy. Defaults to fetch. Valid values are clone, fetch.
	// The Git strategy. Defaults to fetch. Valid values are `clone`, `fetch`.
	BuildGitStrategy *string `json:"buildGitStrategy,omitempty" tf:"build_git_strategy,omitempty"`

	// (Number) The maximum amount of time, in seconds, that a job can run.
	// The maximum amount of time, in seconds, that a job can run.
	BuildTimeout *float64 `json:"buildTimeout,omitempty" tf:"build_timeout,omitempty"`

	// (String) Set the builds access level. Valid values are disabled, private, enabled.
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	BuildsAccessLevel *string `json:"buildsAccessLevel,omitempty" tf:"builds_access_level,omitempty"`

	// (String) Custom Path to CI config file.
	// Custom Path to CI config file.
	CiConfigPath *string `json:"ciConfigPath,omitempty" tf:"ci_config_path,omitempty"`

	// (Number) Default number of revisions for shallow cloning.
	// Default number of revisions for shallow cloning.
	CiDefaultGitDepth *float64 `json:"ciDefaultGitDepth,omitempty" tf:"ci_default_git_depth,omitempty"`

	// (Boolean) When a new deployment job starts, skip older deployment jobs that are still pending.
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	CiForwardDeploymentEnabled *bool `json:"ciForwardDeploymentEnabled,omitempty" tf:"ci_forward_deployment_enabled,omitempty"`

	// (String) The role required to cancel a pipeline or job. Introduced in GitLab 16.8. Premium and Ultimate only. Valid values are developer, maintainer, no one
	// The role required to cancel a pipeline or job. Introduced in GitLab 16.8. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
	CiRestrictPipelineCancellationRole *string `json:"ciRestrictPipelineCancellationRole,omitempty" tf:"ci_restrict_pipeline_cancellation_role,omitempty"`

	// (Boolean) Use separate caches for protected branches.
	// Use separate caches for protected branches.
	CiSeparatedCaches *bool `json:"ciSeparatedCaches,omitempty" tf:"ci_separated_caches,omitempty"`

	// (Block List, Max: 1) Set the image cleanup policy for this project. Note: this field is sometimes named container_expiration_policy_attributes in the GitLab Upstream API. (see below for nested schema)
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
	ContainerExpirationPolicy []ContainerExpirationPolicyObservation `json:"containerExpirationPolicy,omitempty" tf:"container_expiration_policy,omitempty"`

	// (String) Set visibility of container registry, for this project. Valid values are disabled, private, enabled.
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	ContainerRegistryAccessLevel *string `json:"containerRegistryAccessLevel,omitempty" tf:"container_registry_access_level,omitempty"`

	// (Boolean, Deprecated) Enable container registry for the project.
	// Enable container registry for the project.
	ContainerRegistryEnabled *bool `json:"containerRegistryEnabled,omitempty" tf:"container_registry_enabled,omitempty"`

	// (String) The default branch for the project.
	// The default branch for the project.
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	// (String) A description of the project.
	// A description of the project.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Enable email notifications.
	// Enable email notifications.
	EmailsEnabled *bool `json:"emailsEnabled,omitempty" tf:"emails_enabled,omitempty"`

	// (Boolean) Whether the project is empty.
	// Whether the project is empty.
	EmptyRepo *bool `json:"emptyRepo,omitempty" tf:"empty_repo,omitempty"`

	// (String) Set the environments access level. Valid values are disabled, private, enabled.
	// Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
	EnvironmentsAccessLevel *string `json:"environmentsAccessLevel,omitempty" tf:"environments_access_level,omitempty"`

	// (String) The classification label for the project.
	// The classification label for the project.
	ExternalAuthorizationClassificationLabel *string `json:"externalAuthorizationClassificationLabel,omitempty" tf:"external_authorization_classification_label,omitempty"`

	// (String) Set the feature flags access level. Valid values are disabled, private, enabled.
	// Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
	FeatureFlagsAccessLevel *string `json:"featureFlagsAccessLevel,omitempty" tf:"feature_flags_access_level,omitempty"`

	// (Number) The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
	// The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
	ForkedFromProjectID *float64 `json:"forkedFromProjectId,omitempty" tf:"forked_from_project_id,omitempty"`

	// (String) Set the forking access level. Valid values are disabled, private, enabled.
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	ForkingAccessLevel *string `json:"forkingAccessLevel,omitempty" tf:"forking_access_level,omitempty"`

	// (Boolean) Enable group runners for this project.
	// Enable group runners for this project.
	GroupRunnersEnabled *bool `json:"groupRunnersEnabled,omitempty" tf:"group_runners_enabled,omitempty"`

	// level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
	GroupWithProjectTemplatesID *float64 `json:"groupWithProjectTemplatesId,omitempty" tf:"group_with_project_templates_id,omitempty"`

	// (String) URL that can be provided to git clone to clone the
	// URL that can be provided to `git clone` to clone the
	HTTPURLToRepo *string `json:"httpUrlToRepo,omitempty" tf:"http_url_to_repo,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Git URL to a repository to be imported. Together with mirror = true it will setup a Pull Mirror. This can also be used together with forked_from_project_id to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in import_url_username and import_url_password. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. See the examples section for how to properly use it.
	// Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `forked_from_project_id` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `import_url_username` and `import_url_password`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. See the examples section for how to properly use it.
	ImportURL *string `json:"importUrl,omitempty" tf:"import_url,omitempty"`

	// (String) The username for the import_url. The value of this field is used to construct a valid import_url and is only related to the provider.  See the examples section for how to properly use it.
	// The username for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider.  See the examples section for how to properly use it.
	ImportURLUsername *string `json:"importUrlUsername,omitempty" tf:"import_url_username,omitempty"`

	// (String) Set the infrastructure access level. Valid values are disabled, private, enabled.
	// Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
	InfrastructureAccessLevel *string `json:"infrastructureAccessLevel,omitempty" tf:"infrastructure_access_level,omitempty"`

	// (Boolean) Create main branch with first commit containing a README.md file. Must be set to true if importing an uninitialized project with a different default_branch.
	// Create main branch with first commit containing a README.md file. Must be set to `true` if importing an uninitialized project with a different `default_branch`.
	InitializeWithReadme *bool `json:"initializeWithReadme,omitempty" tf:"initialize_with_readme,omitempty"`

	// (String) Set the issues access level. Valid values are disabled, private, enabled.
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	IssuesAccessLevel *string `json:"issuesAccessLevel,omitempty" tf:"issues_access_level,omitempty"`

	// (Boolean) Enable issue tracking for the project.
	// Enable issue tracking for the project.
	IssuesEnabled *bool `json:"issuesEnabled,omitempty" tf:"issues_enabled,omitempty"`

	// (String) Sets the template for new issues in the project.
	// Sets the template for new issues in the project.
	IssuesTemplate *string `json:"issuesTemplate,omitempty" tf:"issues_template,omitempty"`

	// (Boolean) Disable or enable the ability to keep the latest artifact for this project.
	// Disable or enable the ability to keep the latest artifact for this project.
	KeepLatestArtifact *bool `json:"keepLatestArtifact,omitempty" tf:"keep_latest_artifact,omitempty"`

	// (Boolean) Enable LFS for the project.
	// Enable LFS for the project.
	LfsEnabled *bool `json:"lfsEnabled,omitempty" tf:"lfs_enabled,omitempty"`

	// (String) Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	MergeCommitTemplate *string `json:"mergeCommitTemplate,omitempty" tf:"merge_commit_template,omitempty"`

	// (String) Set the merge method. Valid values are merge, rebase_merge, ff.
	// Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
	MergeMethod *string `json:"mergeMethod,omitempty" tf:"merge_method,omitempty"`

	// (Boolean) Enable or disable merge pipelines.
	// Enable or disable merge pipelines.
	MergePipelinesEnabled *bool `json:"mergePipelinesEnabled,omitempty" tf:"merge_pipelines_enabled,omitempty"`

	// (String) Set the merge requests access level. Valid values are disabled, private, enabled.
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	MergeRequestsAccessLevel *string `json:"mergeRequestsAccessLevel,omitempty" tf:"merge_requests_access_level,omitempty"`

	// (Boolean) Enable merge requests for the project.
	// Enable merge requests for the project.
	MergeRequestsEnabled *bool `json:"mergeRequestsEnabled,omitempty" tf:"merge_requests_enabled,omitempty"`

	// (String) Sets the template for new merge requests in the project.
	// Sets the template for new merge requests in the project.
	MergeRequestsTemplate *string `json:"mergeRequestsTemplate,omitempty" tf:"merge_requests_template,omitempty"`

	// (Boolean) Enable or disable merge trains. Requires merge_pipelines_enabled to be set to true to take effect.
	// Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
	MergeTrainsEnabled *bool `json:"mergeTrainsEnabled,omitempty" tf:"merge_trains_enabled,omitempty"`

	// (Boolean) Enable project pull mirror.
	// Enable project pull mirror.
	Mirror *bool `json:"mirror,omitempty" tf:"mirror,omitempty"`

	// (Boolean) Enable overwrite diverged branches for a mirrored project.
	// Enable overwrite diverged branches for a mirrored project.
	MirrorOverwritesDivergedBranches *bool `json:"mirrorOverwritesDivergedBranches,omitempty" tf:"mirror_overwrites_diverged_branches,omitempty"`

	// (Boolean) Enable trigger builds on pushes for a mirrored project.
	// Enable trigger builds on pushes for a mirrored project.
	MirrorTriggerBuilds *bool `json:"mirrorTriggerBuilds,omitempty" tf:"mirror_trigger_builds,omitempty"`

	// (String) Set the monitor access level. Valid values are disabled, private, enabled.
	// Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
	MonitorAccessLevel *string `json:"monitorAccessLevel,omitempty" tf:"monitor_access_level,omitempty"`

	// (Boolean) For forked projects, target merge requests to this project. If false, the target will be the upstream project.
	// For forked projects, target merge requests to this project. If false, the target will be the upstream project.
	MrDefaultTargetSelf *bool `json:"mrDefaultTargetSelf,omitempty" tf:"mr_default_target_self,omitempty"`

	// (Number) The namespace (group or user) of the project. Defaults to your user.
	// The namespace (group or user) of the project. Defaults to your user.
	NamespaceID *float64 `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (Boolean) Set to true if you want allow merges only if all discussions are resolved.
	// Set to true if you want allow merges only if all discussions are resolved.
	OnlyAllowMergeIfAllDiscussionsAreResolved *bool `json:"onlyAllowMergeIfAllDiscussionsAreResolved,omitempty" tf:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`

	// (Boolean) Set to true if you want allow merges only if a pipeline succeeds.
	// Set to true if you want allow merges only if a pipeline succeeds.
	OnlyAllowMergeIfPipelineSucceeds *bool `json:"onlyAllowMergeIfPipelineSucceeds,omitempty" tf:"only_allow_merge_if_pipeline_succeeds,omitempty"`

	// (Boolean) Enable only mirror protected branches for a mirrored project.
	// Enable only mirror protected branches for a mirrored project.
	OnlyMirrorProtectedBranches *bool `json:"onlyMirrorProtectedBranches,omitempty" tf:"only_mirror_protected_branches,omitempty"`

	// (Boolean) Enable packages repository for the project.
	// Enable packages repository for the project.
	PackagesEnabled *bool `json:"packagesEnabled,omitempty" tf:"packages_enabled,omitempty"`

	// (String) Enable pages access control. Valid values are public, private, enabled, disabled.
	// Enable pages access control. Valid values are `public`, `private`, `enabled`, `disabled`.
	PagesAccessLevel *string `json:"pagesAccessLevel,omitempty" tf:"pages_access_level,omitempty"`

	// (String) The path of the repository.
	// The path of the repository.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (String) The path of the repository with namespace.
	// The path of the repository with namespace.
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" tf:"path_with_namespace,omitempty"`

	// (Boolean, Deprecated) Enable pipelines for the project. The pipelines_enabled field is being sent as jobs_enabled in the GitLab API calls.
	// Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
	PipelinesEnabled *bool `json:"pipelinesEnabled,omitempty" tf:"pipelines_enabled,omitempty"`

	// (Boolean) Show link to create/view merge request when pushing from the command line
	// Show link to create/view merge request when pushing from the command line
	PrintingMergeRequestLinkEnabled *bool `json:"printingMergeRequestLinkEnabled,omitempty" tf:"printing_merge_request_link_enabled,omitempty"`

	// project members.
	// If true, jobs can be viewed by non-project members.
	PublicBuilds *bool `json:"publicBuilds,omitempty" tf:"public_builds,omitempty"`

	// project members.
	// If true, jobs can be viewed by non-project members.
	PublicJobs *bool `json:"publicJobs,omitempty" tf:"public_jobs,omitempty"`

	// (Block List, Max: 1) Push rules for the project. (see below for nested schema)
	// Push rules for the project.
	PushRules []PushRulesObservation `json:"pushRules,omitempty" tf:"push_rules,omitempty"`

	// (String) Set the releases access level. Valid values are disabled, private, enabled.
	// Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
	ReleasesAccessLevel *string `json:"releasesAccessLevel,omitempty" tf:"releases_access_level,omitempty"`

	// (Boolean) Enable Delete source branch option by default for all new merge requests.
	// Enable `Delete source branch` option by default for all new merge requests.
	RemoveSourceBranchAfterMerge *bool `json:"removeSourceBranchAfterMerge,omitempty" tf:"remove_source_branch_after_merge,omitempty"`

	// (String) Set the repository access level. Valid values are disabled, private, enabled.
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	RepositoryAccessLevel *string `json:"repositoryAccessLevel,omitempty" tf:"repository_access_level,omitempty"`

	// (String) Which storage shard the repository is on. (administrator only)
	// Which storage shard the repository is on. (administrator only)
	RepositoryStorage *string `json:"repositoryStorage,omitempty" tf:"repository_storage,omitempty"`

	// (Boolean) Allow users to request member access.
	// Allow users to request member access.
	RequestAccessEnabled *bool `json:"requestAccessEnabled,omitempty" tf:"request_access_enabled,omitempty"`

	// (String) Set the requirements access level. Valid values are disabled, private, enabled.
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	RequirementsAccessLevel *string `json:"requirementsAccessLevel,omitempty" tf:"requirements_access_level,omitempty"`

	// (Boolean) Automatically resolve merge request diffs discussions on lines changed with a push.
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	ResolveOutdatedDiffDiscussions *bool `json:"resolveOutdatedDiffDiscussions,omitempty" tf:"resolve_outdated_diff_discussions,omitempty"`

	// defined variables when triggering a pipeline.
	// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
	RestrictUserDefinedVariables *bool `json:"restrictUserDefinedVariables,omitempty" tf:"restrict_user_defined_variables,omitempty"`

	// (String) URL that can be provided to git clone to clone the
	// URL that can be provided to `git clone` to clone the
	SSHURLToRepo *string `json:"sshUrlToRepo,omitempty" tf:"ssh_url_to_repo,omitempty"`

	// (String) Set the security and compliance access level. Valid values are disabled, private, enabled.
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	SecurityAndComplianceAccessLevel *string `json:"securityAndComplianceAccessLevel,omitempty" tf:"security_and_compliance_access_level,omitempty"`

	// (Boolean) Enable shared runners for this project.
	// Enable shared runners for this project.
	SharedRunnersEnabled *bool `json:"sharedRunnersEnabled,omitempty" tf:"shared_runners_enabled,omitempty"`

	// level.
	// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
	// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
	// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
	// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
	// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
	// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
	SkipWaitForDefaultBranchProtection *bool `json:"skipWaitForDefaultBranchProtection,omitempty" tf:"skip_wait_for_default_branch_protection,omitempty"`

	// (String) Set the snippets access level. Valid values are disabled, private, enabled.
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	SnippetsAccessLevel *string `json:"snippetsAccessLevel,omitempty" tf:"snippets_access_level,omitempty"`

	// (Boolean) Enable snippets for the project.
	// Enable snippets for the project.
	SnippetsEnabled *bool `json:"snippetsEnabled,omitempty" tf:"snippets_enabled,omitempty"`

	// (String) Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	SquashCommitTemplate *string `json:"squashCommitTemplate,omitempty" tf:"squash_commit_template,omitempty"`

	// (String) Squash commits when merge request. Valid values are never, always, default_on, or default_off. The default value is default_off. [GitLab >= 14.1]
	// Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`. [GitLab >= 14.1]
	SquashOption *string `json:"squashOption,omitempty" tf:"squash_option,omitempty"`

	// (String) The commit message used to apply merge request suggestions.
	// The commit message used to apply merge request suggestions.
	SuggestionCommitMessage *string `json:"suggestionCommitMessage,omitempty" tf:"suggestion_commit_message,omitempty"`

	// (Set of String) The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with template_project_id.
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// (Number) When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with template_name. See gitlab_group_project_file_template to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab_group_project_file_template` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
	TemplateProjectID *float64 `json:"templateProjectId,omitempty" tf:"template_project_id,omitempty"`

	// (Set of String) The list of topics for the project.
	// The list of topics for the project.
	Topics []*string `json:"topics,omitempty" tf:"topics,omitempty"`

	// (Boolean) Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	// ~> When using a custom template, Group Tokens won't work. You must use a real user's Personal Access Token.
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	// ~> When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting.html#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
	UseCustomTemplate *bool `json:"useCustomTemplate,omitempty" tf:"use_custom_template,omitempty"`

	// (String) Set to public to create a public project. Valid values are private, internal, public.
	// Set to `public` to create a public project. Valid values are `private`, `internal`, `public`.
	VisibilityLevel *string `json:"visibilityLevel,omitempty" tf:"visibility_level,omitempty"`

	// (String) URL that can be used to find the project in a browser.
	// URL that can be used to find the project in a browser.
	WebURL *string `json:"webUrl,omitempty" tf:"web_url,omitempty"`

	// (String) Set the wiki access level. Valid values are disabled, private, enabled.
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	WikiAccessLevel *string `json:"wikiAccessLevel,omitempty" tf:"wiki_access_level,omitempty"`

	// (Boolean) Enable wiki for the project.
	// Enable wiki for the project.
	WikiEnabled *bool `json:"wikiEnabled,omitempty" tf:"wiki_enabled,omitempty"`
}

type ProjectParameters struct {

	// (Boolean) Set to true if you want to treat skipped pipelines as if they finished with success.
	// Set to true if you want to treat skipped pipelines as if they finished with success.
	// +kubebuilder:validation:Optional
	AllowMergeOnSkippedPipeline *bool `json:"allowMergeOnSkippedPipeline,omitempty" tf:"allow_merge_on_skipped_pipeline,omitempty"`

	// (String) Set the analytics access level. Valid values are disabled, private, enabled.
	// Set the analytics access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	AnalyticsAccessLevel *string `json:"analyticsAccessLevel,omitempty" tf:"analytics_access_level,omitempty"`

	// (Number) Number of merge request approvals required for merging. Default is 0.
	// This field does not work well in combination with the gitlab_project_approval_rule resource
	// and is most likely gonna be deprecated in a future GitLab version (see this upstream epic).
	// In the meantime we recommend against using this attribute and use gitlab_project_approval_rule instead.
	// Number of merge request approvals required for merging. Default is 0.
	// This field **does not** work well in combination with the `gitlab_project_approval_rule` resource
	// and is most likely gonna be deprecated in a future GitLab version (see [this upstream epic](https://gitlab.com/groups/gitlab-org/-/epics/7572)).
	// In the meantime we recommend against using this attribute and use `gitlab_project_approval_rule` instead.
	// +kubebuilder:validation:Optional
	ApprovalsBeforeMerge *float64 `json:"approvalsBeforeMerge,omitempty" tf:"approvals_before_merge,omitempty"`

	// (Boolean) Set to true to archive the project instead of deleting on destroy. If set to true it will entire omit the DELETE operation.
	// Set to `true` to archive the project instead of deleting on destroy. If set to `true` it will entire omit the `DELETE` operation.
	// +kubebuilder:validation:Optional
	ArchiveOnDestroy *bool `json:"archiveOnDestroy,omitempty" tf:"archive_on_destroy,omitempty"`

	// only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	// Whether the project is in read-only mode (archived). Repositories can be archived/unarchived by toggling this parameter.
	// +kubebuilder:validation:Optional
	Archived *bool `json:"archived,omitempty" tf:"archived,omitempty"`

	// cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
	// Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled.
	// +kubebuilder:validation:Optional
	AutoCancelPendingPipelines *string `json:"autoCancelPendingPipelines,omitempty" tf:"auto_cancel_pending_pipelines,omitempty"`

	// (String) Auto Deploy strategy. Valid values are continuous, manual, timed_incremental.
	// Auto Deploy strategy. Valid values are `continuous`, `manual`, `timed_incremental`.
	// +kubebuilder:validation:Optional
	AutoDevopsDeployStrategy *string `json:"autoDevopsDeployStrategy,omitempty" tf:"auto_devops_deploy_strategy,omitempty"`

	// (Boolean) Enable Auto DevOps for this project.
	// Enable Auto DevOps for this project.
	// +kubebuilder:validation:Optional
	AutoDevopsEnabled *bool `json:"autoDevopsEnabled,omitempty" tf:"auto_devops_enabled,omitempty"`

	// closing referenced issues on default branch.
	// Set whether auto-closing referenced issues on default branch.
	// +kubebuilder:validation:Optional
	AutocloseReferencedIssues *bool `json:"autocloseReferencedIssues,omitempty" tf:"autoclose_referenced_issues,omitempty"`

	// (String) A local path to the avatar image to upload. Note: not available for imported resources.
	// A local path to the avatar image to upload. **Note**: not available for imported resources.
	// +kubebuilder:validation:Optional
	Avatar *string `json:"avatar,omitempty" tf:"avatar,omitempty"`

	// (String) The hash of the avatar image. Use filesha256("path/to/avatar.png") whenever possible. Note: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	// The hash of the avatar image. Use `filesha256("path/to/avatar.png")` whenever possible. **Note**: this is used to trigger an update of the avatar. If it's not given, but an avatar is given, the avatar will be updated each time.
	// +kubebuilder:validation:Optional
	AvatarHash *string `json:"avatarHash,omitempty" tf:"avatar_hash,omitempty"`

	// (String, Deprecated) Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
	// Test coverage parsing for the project. This is deprecated feature in GitLab 15.0.
	// +kubebuilder:validation:Optional
	BuildCoverageRegex *string `json:"buildCoverageRegex,omitempty" tf:"build_coverage_regex,omitempty"`

	// (String) The Git strategy. Defaults to fetch. Valid values are clone, fetch.
	// The Git strategy. Defaults to fetch. Valid values are `clone`, `fetch`.
	// +kubebuilder:validation:Optional
	BuildGitStrategy *string `json:"buildGitStrategy,omitempty" tf:"build_git_strategy,omitempty"`

	// (Number) The maximum amount of time, in seconds, that a job can run.
	// The maximum amount of time, in seconds, that a job can run.
	// +kubebuilder:validation:Optional
	BuildTimeout *float64 `json:"buildTimeout,omitempty" tf:"build_timeout,omitempty"`

	// (String) Set the builds access level. Valid values are disabled, private, enabled.
	// Set the builds access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	BuildsAccessLevel *string `json:"buildsAccessLevel,omitempty" tf:"builds_access_level,omitempty"`

	// (String) Custom Path to CI config file.
	// Custom Path to CI config file.
	// +kubebuilder:validation:Optional
	CiConfigPath *string `json:"ciConfigPath,omitempty" tf:"ci_config_path,omitempty"`

	// (Number) Default number of revisions for shallow cloning.
	// Default number of revisions for shallow cloning.
	// +kubebuilder:validation:Optional
	CiDefaultGitDepth *float64 `json:"ciDefaultGitDepth,omitempty" tf:"ci_default_git_depth,omitempty"`

	// (Boolean) When a new deployment job starts, skip older deployment jobs that are still pending.
	// When a new deployment job starts, skip older deployment jobs that are still pending.
	// +kubebuilder:validation:Optional
	CiForwardDeploymentEnabled *bool `json:"ciForwardDeploymentEnabled,omitempty" tf:"ci_forward_deployment_enabled,omitempty"`

	// (String) The role required to cancel a pipeline or job. Introduced in GitLab 16.8. Premium and Ultimate only. Valid values are developer, maintainer, no one
	// The role required to cancel a pipeline or job. Introduced in GitLab 16.8. Premium and Ultimate only. Valid values are `developer`, `maintainer`, `no one`
	// +kubebuilder:validation:Optional
	CiRestrictPipelineCancellationRole *string `json:"ciRestrictPipelineCancellationRole,omitempty" tf:"ci_restrict_pipeline_cancellation_role,omitempty"`

	// (Boolean) Use separate caches for protected branches.
	// Use separate caches for protected branches.
	// +kubebuilder:validation:Optional
	CiSeparatedCaches *bool `json:"ciSeparatedCaches,omitempty" tf:"ci_separated_caches,omitempty"`

	// (Block List, Max: 1) Set the image cleanup policy for this project. Note: this field is sometimes named container_expiration_policy_attributes in the GitLab Upstream API. (see below for nested schema)
	// Set the image cleanup policy for this project. **Note**: this field is sometimes named `container_expiration_policy_attributes` in the GitLab Upstream API.
	// +kubebuilder:validation:Optional
	ContainerExpirationPolicy []ContainerExpirationPolicyParameters `json:"containerExpirationPolicy,omitempty" tf:"container_expiration_policy,omitempty"`

	// (String) Set visibility of container registry, for this project. Valid values are disabled, private, enabled.
	// Set visibility of container registry, for this project. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	ContainerRegistryAccessLevel *string `json:"containerRegistryAccessLevel,omitempty" tf:"container_registry_access_level,omitempty"`

	// (Boolean, Deprecated) Enable container registry for the project.
	// Enable container registry for the project.
	// +kubebuilder:validation:Optional
	ContainerRegistryEnabled *bool `json:"containerRegistryEnabled,omitempty" tf:"container_registry_enabled,omitempty"`

	// (String) The default branch for the project.
	// The default branch for the project.
	// +kubebuilder:validation:Optional
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	// (String) A description of the project.
	// A description of the project.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Enable email notifications.
	// Enable email notifications.
	// +kubebuilder:validation:Optional
	EmailsEnabled *bool `json:"emailsEnabled,omitempty" tf:"emails_enabled,omitempty"`

	// (String) Set the environments access level. Valid values are disabled, private, enabled.
	// Set the environments access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	EnvironmentsAccessLevel *string `json:"environmentsAccessLevel,omitempty" tf:"environments_access_level,omitempty"`

	// (String) The classification label for the project.
	// The classification label for the project.
	// +kubebuilder:validation:Optional
	ExternalAuthorizationClassificationLabel *string `json:"externalAuthorizationClassificationLabel,omitempty" tf:"external_authorization_classification_label,omitempty"`

	// (String) Set the feature flags access level. Valid values are disabled, private, enabled.
	// Set the feature flags access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	FeatureFlagsAccessLevel *string `json:"featureFlagsAccessLevel,omitempty" tf:"feature_flags_access_level,omitempty"`

	// (Number) The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
	// The id of the project to fork. During create the project is forked and during an update the fork relation is changed.
	// +kubebuilder:validation:Optional
	ForkedFromProjectID *float64 `json:"forkedFromProjectId,omitempty" tf:"forked_from_project_id,omitempty"`

	// (String) Set the forking access level. Valid values are disabled, private, enabled.
	// Set the forking access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	ForkingAccessLevel *string `json:"forkingAccessLevel,omitempty" tf:"forking_access_level,omitempty"`

	// (Boolean) Enable group runners for this project.
	// Enable group runners for this project.
	// +kubebuilder:validation:Optional
	GroupRunnersEnabled *bool `json:"groupRunnersEnabled,omitempty" tf:"group_runners_enabled,omitempty"`

	// level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
	// For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true (enterprise edition).
	// +kubebuilder:validation:Optional
	GroupWithProjectTemplatesID *float64 `json:"groupWithProjectTemplatesId,omitempty" tf:"group_with_project_templates_id,omitempty"`

	// (String) Git URL to a repository to be imported. Together with mirror = true it will setup a Pull Mirror. This can also be used together with forked_from_project_id to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in import_url_username and import_url_password. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. See the examples section for how to properly use it.
	// Git URL to a repository to be imported. Together with `mirror = true` it will setup a Pull Mirror. This can also be used together with `forked_from_project_id` to setup a Pull Mirror for a fork. The fork takes precedence over the import. Make sure to provide the credentials in `import_url_username` and `import_url_password`. GitLab never returns the credentials, thus the provider cannot detect configuration drift in the credentials. See the examples section for how to properly use it.
	// +kubebuilder:validation:Optional
	ImportURL *string `json:"importUrl,omitempty" tf:"import_url,omitempty"`

	// (String, Sensitive) The password for the import_url. The value of this field is used to construct a valid import_url and is only related to the provider. See the examples section for how to properly use it.
	// The password for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider. See the examples section for how to properly use it.
	// +kubebuilder:validation:Optional
	ImportURLPasswordSecretRef *v1.SecretKeySelector `json:"importUrlPasswordSecretRef,omitempty" tf:"-"`

	// (String) The username for the import_url. The value of this field is used to construct a valid import_url and is only related to the provider.  See the examples section for how to properly use it.
	// The username for the `import_url`. The value of this field is used to construct a valid `import_url` and is only related to the provider.  See the examples section for how to properly use it.
	// +kubebuilder:validation:Optional
	ImportURLUsername *string `json:"importUrlUsername,omitempty" tf:"import_url_username,omitempty"`

	// (String) Set the infrastructure access level. Valid values are disabled, private, enabled.
	// Set the infrastructure access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	InfrastructureAccessLevel *string `json:"infrastructureAccessLevel,omitempty" tf:"infrastructure_access_level,omitempty"`

	// (Boolean) Create main branch with first commit containing a README.md file. Must be set to true if importing an uninitialized project with a different default_branch.
	// Create main branch with first commit containing a README.md file. Must be set to `true` if importing an uninitialized project with a different `default_branch`.
	// +kubebuilder:validation:Optional
	InitializeWithReadme *bool `json:"initializeWithReadme,omitempty" tf:"initialize_with_readme,omitempty"`

	// (String) Set the issues access level. Valid values are disabled, private, enabled.
	// Set the issues access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	IssuesAccessLevel *string `json:"issuesAccessLevel,omitempty" tf:"issues_access_level,omitempty"`

	// (Boolean) Enable issue tracking for the project.
	// Enable issue tracking for the project.
	// +kubebuilder:validation:Optional
	IssuesEnabled *bool `json:"issuesEnabled,omitempty" tf:"issues_enabled,omitempty"`

	// (String) Sets the template for new issues in the project.
	// Sets the template for new issues in the project.
	// +kubebuilder:validation:Optional
	IssuesTemplate *string `json:"issuesTemplate,omitempty" tf:"issues_template,omitempty"`

	// (Boolean) Disable or enable the ability to keep the latest artifact for this project.
	// Disable or enable the ability to keep the latest artifact for this project.
	// +kubebuilder:validation:Optional
	KeepLatestArtifact *bool `json:"keepLatestArtifact,omitempty" tf:"keep_latest_artifact,omitempty"`

	// (Boolean) Enable LFS for the project.
	// Enable LFS for the project.
	// +kubebuilder:validation:Optional
	LfsEnabled *bool `json:"lfsEnabled,omitempty" tf:"lfs_enabled,omitempty"`

	// (String) Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	// Template used to create merge commit message in merge requests. (Introduced in GitLab 14.5.)
	// +kubebuilder:validation:Optional
	MergeCommitTemplate *string `json:"mergeCommitTemplate,omitempty" tf:"merge_commit_template,omitempty"`

	// (String) Set the merge method. Valid values are merge, rebase_merge, ff.
	// Set the merge method. Valid values are `merge`, `rebase_merge`, `ff`.
	// +kubebuilder:validation:Optional
	MergeMethod *string `json:"mergeMethod,omitempty" tf:"merge_method,omitempty"`

	// (Boolean) Enable or disable merge pipelines.
	// Enable or disable merge pipelines.
	// +kubebuilder:validation:Optional
	MergePipelinesEnabled *bool `json:"mergePipelinesEnabled,omitempty" tf:"merge_pipelines_enabled,omitempty"`

	// (String) Set the merge requests access level. Valid values are disabled, private, enabled.
	// Set the merge requests access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	MergeRequestsAccessLevel *string `json:"mergeRequestsAccessLevel,omitempty" tf:"merge_requests_access_level,omitempty"`

	// (Boolean) Enable merge requests for the project.
	// Enable merge requests for the project.
	// +kubebuilder:validation:Optional
	MergeRequestsEnabled *bool `json:"mergeRequestsEnabled,omitempty" tf:"merge_requests_enabled,omitempty"`

	// (String) Sets the template for new merge requests in the project.
	// Sets the template for new merge requests in the project.
	// +kubebuilder:validation:Optional
	MergeRequestsTemplate *string `json:"mergeRequestsTemplate,omitempty" tf:"merge_requests_template,omitempty"`

	// (Boolean) Enable or disable merge trains. Requires merge_pipelines_enabled to be set to true to take effect.
	// Enable or disable merge trains. Requires `merge_pipelines_enabled` to be set to `true` to take effect.
	// +kubebuilder:validation:Optional
	MergeTrainsEnabled *bool `json:"mergeTrainsEnabled,omitempty" tf:"merge_trains_enabled,omitempty"`

	// (Boolean) Enable project pull mirror.
	// Enable project pull mirror.
	// +kubebuilder:validation:Optional
	Mirror *bool `json:"mirror,omitempty" tf:"mirror,omitempty"`

	// (Boolean) Enable overwrite diverged branches for a mirrored project.
	// Enable overwrite diverged branches for a mirrored project.
	// +kubebuilder:validation:Optional
	MirrorOverwritesDivergedBranches *bool `json:"mirrorOverwritesDivergedBranches,omitempty" tf:"mirror_overwrites_diverged_branches,omitempty"`

	// (Boolean) Enable trigger builds on pushes for a mirrored project.
	// Enable trigger builds on pushes for a mirrored project.
	// +kubebuilder:validation:Optional
	MirrorTriggerBuilds *bool `json:"mirrorTriggerBuilds,omitempty" tf:"mirror_trigger_builds,omitempty"`

	// (String) Set the monitor access level. Valid values are disabled, private, enabled.
	// Set the monitor access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	MonitorAccessLevel *string `json:"monitorAccessLevel,omitempty" tf:"monitor_access_level,omitempty"`

	// (Boolean) For forked projects, target merge requests to this project. If false, the target will be the upstream project.
	// For forked projects, target merge requests to this project. If false, the target will be the upstream project.
	// +kubebuilder:validation:Optional
	MrDefaultTargetSelf *bool `json:"mrDefaultTargetSelf,omitempty" tf:"mr_default_target_self,omitempty"`

	// (Number) The namespace (group or user) of the project. Defaults to your user.
	// The namespace (group or user) of the project. Defaults to your user.
	// +kubebuilder:validation:Optional
	NamespaceID *float64 `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (Boolean) Set to true if you want allow merges only if all discussions are resolved.
	// Set to true if you want allow merges only if all discussions are resolved.
	// +kubebuilder:validation:Optional
	OnlyAllowMergeIfAllDiscussionsAreResolved *bool `json:"onlyAllowMergeIfAllDiscussionsAreResolved,omitempty" tf:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`

	// (Boolean) Set to true if you want allow merges only if a pipeline succeeds.
	// Set to true if you want allow merges only if a pipeline succeeds.
	// +kubebuilder:validation:Optional
	OnlyAllowMergeIfPipelineSucceeds *bool `json:"onlyAllowMergeIfPipelineSucceeds,omitempty" tf:"only_allow_merge_if_pipeline_succeeds,omitempty"`

	// (Boolean) Enable only mirror protected branches for a mirrored project.
	// Enable only mirror protected branches for a mirrored project.
	// +kubebuilder:validation:Optional
	OnlyMirrorProtectedBranches *bool `json:"onlyMirrorProtectedBranches,omitempty" tf:"only_mirror_protected_branches,omitempty"`

	// (Boolean) Enable packages repository for the project.
	// Enable packages repository for the project.
	// +kubebuilder:validation:Optional
	PackagesEnabled *bool `json:"packagesEnabled,omitempty" tf:"packages_enabled,omitempty"`

	// (String) Enable pages access control. Valid values are public, private, enabled, disabled.
	// Enable pages access control. Valid values are `public`, `private`, `enabled`, `disabled`.
	// +kubebuilder:validation:Optional
	PagesAccessLevel *string `json:"pagesAccessLevel,omitempty" tf:"pages_access_level,omitempty"`

	// (String) The path of the repository.
	// The path of the repository.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Boolean, Deprecated) Enable pipelines for the project. The pipelines_enabled field is being sent as jobs_enabled in the GitLab API calls.
	// Enable pipelines for the project. The `pipelines_enabled` field is being sent as `jobs_enabled` in the GitLab API calls.
	// +kubebuilder:validation:Optional
	PipelinesEnabled *bool `json:"pipelinesEnabled,omitempty" tf:"pipelines_enabled,omitempty"`

	// (Boolean) Show link to create/view merge request when pushing from the command line
	// Show link to create/view merge request when pushing from the command line
	// +kubebuilder:validation:Optional
	PrintingMergeRequestLinkEnabled *bool `json:"printingMergeRequestLinkEnabled,omitempty" tf:"printing_merge_request_link_enabled,omitempty"`

	// project members.
	// If true, jobs can be viewed by non-project members.
	// +kubebuilder:validation:Optional
	PublicBuilds *bool `json:"publicBuilds,omitempty" tf:"public_builds,omitempty"`

	// project members.
	// If true, jobs can be viewed by non-project members.
	// +kubebuilder:validation:Optional
	PublicJobs *bool `json:"publicJobs,omitempty" tf:"public_jobs,omitempty"`

	// (Block List, Max: 1) Push rules for the project. (see below for nested schema)
	// Push rules for the project.
	// +kubebuilder:validation:Optional
	PushRules []PushRulesParameters `json:"pushRules,omitempty" tf:"push_rules,omitempty"`

	// (String) Set the releases access level. Valid values are disabled, private, enabled.
	// Set the releases access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	ReleasesAccessLevel *string `json:"releasesAccessLevel,omitempty" tf:"releases_access_level,omitempty"`

	// (Boolean) Enable Delete source branch option by default for all new merge requests.
	// Enable `Delete source branch` option by default for all new merge requests.
	// +kubebuilder:validation:Optional
	RemoveSourceBranchAfterMerge *bool `json:"removeSourceBranchAfterMerge,omitempty" tf:"remove_source_branch_after_merge,omitempty"`

	// (String) Set the repository access level. Valid values are disabled, private, enabled.
	// Set the repository access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	RepositoryAccessLevel *string `json:"repositoryAccessLevel,omitempty" tf:"repository_access_level,omitempty"`

	// (String) Which storage shard the repository is on. (administrator only)
	// Which storage shard the repository is on. (administrator only)
	// +kubebuilder:validation:Optional
	RepositoryStorage *string `json:"repositoryStorage,omitempty" tf:"repository_storage,omitempty"`

	// (Boolean) Allow users to request member access.
	// Allow users to request member access.
	// +kubebuilder:validation:Optional
	RequestAccessEnabled *bool `json:"requestAccessEnabled,omitempty" tf:"request_access_enabled,omitempty"`

	// (String) Set the requirements access level. Valid values are disabled, private, enabled.
	// Set the requirements access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	RequirementsAccessLevel *string `json:"requirementsAccessLevel,omitempty" tf:"requirements_access_level,omitempty"`

	// (Boolean) Automatically resolve merge request diffs discussions on lines changed with a push.
	// Automatically resolve merge request diffs discussions on lines changed with a push.
	// +kubebuilder:validation:Optional
	ResolveOutdatedDiffDiscussions *bool `json:"resolveOutdatedDiffDiscussions,omitempty" tf:"resolve_outdated_diff_discussions,omitempty"`

	// defined variables when triggering a pipeline.
	// Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline.
	// +kubebuilder:validation:Optional
	RestrictUserDefinedVariables *bool `json:"restrictUserDefinedVariables,omitempty" tf:"restrict_user_defined_variables,omitempty"`

	// (String) Set the security and compliance access level. Valid values are disabled, private, enabled.
	// Set the security and compliance access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	SecurityAndComplianceAccessLevel *string `json:"securityAndComplianceAccessLevel,omitempty" tf:"security_and_compliance_access_level,omitempty"`

	// (Boolean) Enable shared runners for this project.
	// Enable shared runners for this project.
	// +kubebuilder:validation:Optional
	SharedRunnersEnabled *bool `json:"sharedRunnersEnabled,omitempty" tf:"shared_runners_enabled,omitempty"`

	// level.
	// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
	// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
	// If `true`, the default behavior to wait for the default branch protection to be created is skipped.
	// This is necessary if the current user is not an admin and the default branch protection is disabled on an instance-level.
	// There is currently no known way to determine if the default branch protection is disabled on an instance-level for non-admin users.
	// This attribute is only used during resource creation, thus changes are suppressed and the attribute cannot be imported.
	// +kubebuilder:validation:Optional
	SkipWaitForDefaultBranchProtection *bool `json:"skipWaitForDefaultBranchProtection,omitempty" tf:"skip_wait_for_default_branch_protection,omitempty"`

	// (String) Set the snippets access level. Valid values are disabled, private, enabled.
	// Set the snippets access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	SnippetsAccessLevel *string `json:"snippetsAccessLevel,omitempty" tf:"snippets_access_level,omitempty"`

	// (Boolean) Enable snippets for the project.
	// Enable snippets for the project.
	// +kubebuilder:validation:Optional
	SnippetsEnabled *bool `json:"snippetsEnabled,omitempty" tf:"snippets_enabled,omitempty"`

	// (String) Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	// Template used to create squash commit message in merge requests. (Introduced in GitLab 14.6.)
	// +kubebuilder:validation:Optional
	SquashCommitTemplate *string `json:"squashCommitTemplate,omitempty" tf:"squash_commit_template,omitempty"`

	// (String) Squash commits when merge request. Valid values are never, always, default_on, or default_off. The default value is default_off. [GitLab >= 14.1]
	// Squash commits when merge request. Valid values are `never`, `always`, `default_on`, or `default_off`. The default value is `default_off`. [GitLab >= 14.1]
	// +kubebuilder:validation:Optional
	SquashOption *string `json:"squashOption,omitempty" tf:"squash_option,omitempty"`

	// (String) The commit message used to apply merge request suggestions.
	// The commit message used to apply merge request suggestions.
	// +kubebuilder:validation:Optional
	SuggestionCommitMessage *string `json:"suggestionCommitMessage,omitempty" tf:"suggestion_commit_message,omitempty"`

	// (Set of String) The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	// The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with template_project_id.
	// When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. This option is mutually exclusive with `template_project_id`.
	// +kubebuilder:validation:Optional
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`

	// (Number) When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with template_name. See gitlab_group_project_file_template to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
	// When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous (enterprise edition). This option is mutually exclusive with `template_name`. See `gitlab_group_project_file_template` to set a project as a template project. If a project has not been set as a template, using it here will result in an error.
	// +kubebuilder:validation:Optional
	TemplateProjectID *float64 `json:"templateProjectId,omitempty" tf:"template_project_id,omitempty"`

	// (Set of String) The list of topics for the project.
	// The list of topics for the project.
	// +kubebuilder:validation:Optional
	Topics []*string `json:"topics,omitempty" tf:"topics,omitempty"`

	// (Boolean) Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	// ~> When using a custom template, Group Tokens won't work. You must use a real user's Personal Access Token.
	// Use either custom instance or group (with group_with_project_templates_id) project template (enterprise edition).
	// ~> When using a custom template, [Group Tokens won't work](https://docs.gitlab.com/15.7/ee/user/project/settings/import_export_troubleshooting.html#import-using-the-rest-api-fails-when-using-a-group-access-token). You must use a real user's Personal Access Token.
	// +kubebuilder:validation:Optional
	UseCustomTemplate *bool `json:"useCustomTemplate,omitempty" tf:"use_custom_template,omitempty"`

	// (String) Set to public to create a public project. Valid values are private, internal, public.
	// Set to `public` to create a public project. Valid values are `private`, `internal`, `public`.
	// +kubebuilder:validation:Optional
	VisibilityLevel *string `json:"visibilityLevel,omitempty" tf:"visibility_level,omitempty"`

	// (String) Set the wiki access level. Valid values are disabled, private, enabled.
	// Set the wiki access level. Valid values are `disabled`, `private`, `enabled`.
	// +kubebuilder:validation:Optional
	WikiAccessLevel *string `json:"wikiAccessLevel,omitempty" tf:"wiki_access_level,omitempty"`

	// (Boolean) Enable wiki for the project.
	// Enable wiki for the project.
	// +kubebuilder:validation:Optional
	WikiEnabled *bool `json:"wikiEnabled,omitempty" tf:"wiki_enabled,omitempty"`
}

type PushRulesInitParameters struct {

	// company.com$.
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex *string `json:"authorEmailRegex,omitempty" tf:"author_email_regex,omitempty"`

	// (String) All branch names must match this regex, e.g. (feature|hotfix)\/*.
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex *string `json:"branchNameRegex,omitempty" tf:"branch_name_regex,omitempty"`

	// (Boolean) Users can only push commits to this repository that were committed with one of their own verified emails.
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck *bool `json:"commitCommitterCheck,omitempty" tf:"commit_committer_check,omitempty"`

	// (Boolean) Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	CommitCommitterNameCheck *bool `json:"commitCommitterNameCheck,omitempty" tf:"commit_committer_name_check,omitempty"`

	// (String) No commit message is allowed to match this regex, e.g. ssh\:\/\/.
	// No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
	CommitMessageNegativeRegex *string `json:"commitMessageNegativeRegex,omitempty" tf:"commit_message_negative_regex,omitempty"`

	// (String) All commit messages must match this regex, e.g. Fixed \d+\..*.
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex *string `json:"commitMessageRegex,omitempty" tf:"commit_message_regex,omitempty"`

	// (Boolean) Deny deleting a tag.
	// Deny deleting a tag.
	DenyDeleteTag *bool `json:"denyDeleteTag,omitempty" tf:"deny_delete_tag,omitempty"`

	// (String) All committed filenames must not match this regex, e.g. (jar|exe)$.
	// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex *string `json:"fileNameRegex,omitempty" tf:"file_name_regex,omitempty"`

	// (Number) Maximum file size (MB).
	// Maximum file size (MB).
	MaxFileSize *float64 `json:"maxFileSize,omitempty" tf:"max_file_size,omitempty"`

	// (Boolean) Restrict commits by author (email) to existing GitLab users.
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck *bool `json:"memberCheck,omitempty" tf:"member_check,omitempty"`

	// (Boolean) GitLab will reject any files that are likely to contain secrets.
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets *bool `json:"preventSecrets,omitempty" tf:"prevent_secrets,omitempty"`

	// (Boolean) Reject commit when it’s not signed through GPG.
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits *bool `json:"rejectUnsignedCommits,omitempty" tf:"reject_unsigned_commits,omitempty"`
}

type PushRulesObservation struct {

	// company.com$.
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	AuthorEmailRegex *string `json:"authorEmailRegex,omitempty" tf:"author_email_regex,omitempty"`

	// (String) All branch names must match this regex, e.g. (feature|hotfix)\/*.
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	BranchNameRegex *string `json:"branchNameRegex,omitempty" tf:"branch_name_regex,omitempty"`

	// (Boolean) Users can only push commits to this repository that were committed with one of their own verified emails.
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	CommitCommitterCheck *bool `json:"commitCommitterCheck,omitempty" tf:"commit_committer_check,omitempty"`

	// (Boolean) Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	CommitCommitterNameCheck *bool `json:"commitCommitterNameCheck,omitempty" tf:"commit_committer_name_check,omitempty"`

	// (String) No commit message is allowed to match this regex, e.g. ssh\:\/\/.
	// No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
	CommitMessageNegativeRegex *string `json:"commitMessageNegativeRegex,omitempty" tf:"commit_message_negative_regex,omitempty"`

	// (String) All commit messages must match this regex, e.g. Fixed \d+\..*.
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	CommitMessageRegex *string `json:"commitMessageRegex,omitempty" tf:"commit_message_regex,omitempty"`

	// (Boolean) Deny deleting a tag.
	// Deny deleting a tag.
	DenyDeleteTag *bool `json:"denyDeleteTag,omitempty" tf:"deny_delete_tag,omitempty"`

	// (String) All committed filenames must not match this regex, e.g. (jar|exe)$.
	// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
	FileNameRegex *string `json:"fileNameRegex,omitempty" tf:"file_name_regex,omitempty"`

	// (Number) Maximum file size (MB).
	// Maximum file size (MB).
	MaxFileSize *float64 `json:"maxFileSize,omitempty" tf:"max_file_size,omitempty"`

	// (Boolean) Restrict commits by author (email) to existing GitLab users.
	// Restrict commits by author (email) to existing GitLab users.
	MemberCheck *bool `json:"memberCheck,omitempty" tf:"member_check,omitempty"`

	// (Boolean) GitLab will reject any files that are likely to contain secrets.
	// GitLab will reject any files that are likely to contain secrets.
	PreventSecrets *bool `json:"preventSecrets,omitempty" tf:"prevent_secrets,omitempty"`

	// (Boolean) Reject commit when it’s not signed through GPG.
	// Reject commit when it’s not signed through GPG.
	RejectUnsignedCommits *bool `json:"rejectUnsignedCommits,omitempty" tf:"reject_unsigned_commits,omitempty"`
}

type PushRulesParameters struct {

	// company.com$.
	// All commit author emails must match this regex, e.g. `@my-company.com$`.
	// +kubebuilder:validation:Optional
	AuthorEmailRegex *string `json:"authorEmailRegex,omitempty" tf:"author_email_regex,omitempty"`

	// (String) All branch names must match this regex, e.g. (feature|hotfix)\/*.
	// All branch names must match this regex, e.g. `(feature|hotfix)\/*`.
	// +kubebuilder:validation:Optional
	BranchNameRegex *string `json:"branchNameRegex,omitempty" tf:"branch_name_regex,omitempty"`

	// (Boolean) Users can only push commits to this repository that were committed with one of their own verified emails.
	// Users can only push commits to this repository that were committed with one of their own verified emails.
	// +kubebuilder:validation:Optional
	CommitCommitterCheck *bool `json:"commitCommitterCheck,omitempty" tf:"commit_committer_check,omitempty"`

	// (Boolean) Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	// Users can only push commits to this repository if the commit author name is consistent with their GitLab account name.
	// +kubebuilder:validation:Optional
	CommitCommitterNameCheck *bool `json:"commitCommitterNameCheck,omitempty" tf:"commit_committer_name_check,omitempty"`

	// (String) No commit message is allowed to match this regex, e.g. ssh\:\/\/.
	// No commit message is allowed to match this regex, e.g. `ssh\:\/\/`.
	// +kubebuilder:validation:Optional
	CommitMessageNegativeRegex *string `json:"commitMessageNegativeRegex,omitempty" tf:"commit_message_negative_regex,omitempty"`

	// (String) All commit messages must match this regex, e.g. Fixed \d+\..*.
	// All commit messages must match this regex, e.g. `Fixed \d+\..*`.
	// +kubebuilder:validation:Optional
	CommitMessageRegex *string `json:"commitMessageRegex,omitempty" tf:"commit_message_regex,omitempty"`

	// (Boolean) Deny deleting a tag.
	// Deny deleting a tag.
	// +kubebuilder:validation:Optional
	DenyDeleteTag *bool `json:"denyDeleteTag,omitempty" tf:"deny_delete_tag,omitempty"`

	// (String) All committed filenames must not match this regex, e.g. (jar|exe)$.
	// All committed filenames must not match this regex, e.g. `(jar|exe)$`.
	// +kubebuilder:validation:Optional
	FileNameRegex *string `json:"fileNameRegex,omitempty" tf:"file_name_regex,omitempty"`

	// (Number) Maximum file size (MB).
	// Maximum file size (MB).
	// +kubebuilder:validation:Optional
	MaxFileSize *float64 `json:"maxFileSize,omitempty" tf:"max_file_size,omitempty"`

	// (Boolean) Restrict commits by author (email) to existing GitLab users.
	// Restrict commits by author (email) to existing GitLab users.
	// +kubebuilder:validation:Optional
	MemberCheck *bool `json:"memberCheck,omitempty" tf:"member_check,omitempty"`

	// (Boolean) GitLab will reject any files that are likely to contain secrets.
	// GitLab will reject any files that are likely to contain secrets.
	// +kubebuilder:validation:Optional
	PreventSecrets *bool `json:"preventSecrets,omitempty" tf:"prevent_secrets,omitempty"`

	// (Boolean) Reject commit when it’s not signed through GPG.
	// Reject commit when it’s not signed through GPG.
	// +kubebuilder:validation:Optional
	RejectUnsignedCommits *bool `json:"rejectUnsignedCommits,omitempty" tf:"reject_unsigned_commits,omitempty"`
}

// ProjectSpec defines the desired state of Project
type ProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectInitParameters `json:"initProvider,omitempty"`
}

// ProjectStatus defines the observed state of Project.
type ProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Project is the Schema for the Projects API. The gitlab_project resource allows to manage the lifecycle of a project. A project can either be created in a group or user namespace. -> Default Branch Protection Workaround Projects are created with default branch protection. In the gitlab_project resource, define a local-exec provisioner which invokes the /projects/:id/protected_branches/:name API via curl to delete the branch protection on the default branch using a DELETE request. Then define the desired branch protection using the gitlab_branch_protection resource. Upstream API: GitLab REST API docs https://docs.gitlab.com/ce/api/projects.html
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gitlab}
type Project struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectSpec   `json:"spec"`
	Status            ProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectList contains a list of Projects
type ProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Project `json:"items"`
}

// Repository type metadata.
var (
	Project_Kind             = "Project"
	Project_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Project_Kind}.String()
	Project_KindAPIVersion   = Project_Kind + "." + CRDGroupVersion.String()
	Project_GroupVersionKind = CRDGroupVersion.WithKind(Project_Kind)
)

func init() {
	SchemeBuilder.Register(&Project{}, &ProjectList{})
}
